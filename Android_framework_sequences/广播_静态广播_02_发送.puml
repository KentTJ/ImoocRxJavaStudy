@startuml
title 静态广播的发送(这只讨论普通广播，不是ordered广播或Sticky广播)

Activity -> ContextImpl : sendBroadcast

ContextImpl -> IActivityManager : broadcastIntent

IActivityManager -> AMS : broadcastIntent

AMS -> AMS : broadcastIntentLocked
note right
broadcastIntentLocked 方法的主要流程：

1、查询静态和动态注册的receiver
// Figure out who all will receive this broadcast.
List receivers = null;
List<BroadcastFilter> registeredReceivers = null;
//查询静态注册的Receiver
receivers = collectReceiverComponents(intent, resolvedType, callingUid, users);
//通过mReceiverResolver去找动态注册的Receiver
registeredReceivers = mReceiverResolver.queryIntent(intent,
                        resolvedType, false /*defaultOnly*/, userId);


2、处理动态的receiver，并行处理
int NR = registeredReceivers != null ? registeredReceivers.size() : 0;
if (!ordered && NR > 0) {
//处理动态的receiver，加到并行分发队列

}

3、没处理完的receiver跟静态的合并一处(ordered为true时，则上面代码不会处理)
//给没有处理完的动态receiver，跟静态receiver合并到一起
//为什么没有处理完呢，比如ordered == true，则2处的，动态的receiver
//就不会处理，就会走到这里的代码，将其和静态的receiver合并在一起。


4、处理剩下的receiver，串行处理
if ((receivers != null && receivers.size() > 0)
                || resultTo != null) {
//处理剩下的receiver，加到串行分发队列

}

注: 因为动态广播的发送部分，已经讲解过 动态广播的分发部分，现在主要讲解
静态广播的串行处理部分。
end note
'if ((receivers != null && receivers.size() > 0)
 '                || resultTo != null) {
 '            BroadcastQueue queue = broadcastQueueForIntent(intent);
 '            BroadcastRecord r = new BroadcastRecord(queue, intent, callerApp,
 '                    callerPackage, callingPid, callingUid, callerInstantApp, resolvedType,
 '                    requiredPermissions, appOp, brOptions, receivers, resultTo, resultCode,
 '                    resultData, resultExtras, ordered, sticky, false, userId);
 '                queue.enqueueOrderedBroadcastLocked(r);
 '                queue.scheduleBroadcastsLocked();
 '}

AMS -> AMS : broadcastQueueForIntent
AMS <-- AMS : BroadcastQueue mBgBroadcastQueue

AMS -> BroadcastRecord : BroadcastRecord
AMS <-- BroadcastRecord : BroadcastRecord r

AMS -> BroadcastQueue : enqueueOrderedBroadcastLocked(r)

BroadcastQueue -> ArrayList : mOrderedBroadcasts.add(r)
note right
因为每个BroadcastQueue有两个Broadcast列表，
一个串行列表，一个并行列表。
静态广播加入串行列表。
end note

AMS -> BroadcastQueue : scheduleBroadcastsLocked

BroadcastQueue -> BroadcastHandler : sendMessage(id BROADCAST_INTENT_MSG)
note right
转换线程。
end note

BroadcastQueue -> BroadcastHandler : handleMessage
note right
ServiceThread线程中处理的，对应AMS中代码如下：
mHandlerThread = new ServiceThread(TAG,
      THREAD_PRIORITY_FOREGROUND, false /*allowIo*/);
mHandlerThread.start();
mHandler = new MainHandler(mHandlerThread.getLooper());
end note

BroadcastHandler -> BroadcastQueue : processNextBroadcast
note right
进入AMS的ServiceThread线程处理。
end note

BroadcastQueue -> BroadcastQueue : processNextBroadcastLocked
note right
BroadcastQueue 中 processNextBroadcastLocked的处理流程

//先给并行分发的广播分发完，然后接下来分发串行广播

//如果有pending的广播，就先直接返回，这个广播在等待应用进程启动

//如果当前广播分发超时了，就废弃这个广播，处理下一个广播
//如果没有超时，并且正在分发中，就先返回，什么也不做
//如果当前广播已经分发完一个receiver了，就继续分发下一个receiver
//如果这个receiver是动态注册的receiver，就直接分发
//如果这个receiver是静态注册的receiver，就先看进程启动没有
//如果进程启动了，就直接分发
//没启动的话就先启动进程，然后给广播标记为pending
//进程启动后attachApplication时，继续处理这个pending的广播
end note

BroadcastQueue -> BroadcastQueue : broadcastTimeoutLocked
note right
processNextBroadcastLocked方法内部：超时的情况代码处理：

//找到当前分发的receiver对应的进程

//mPendingBroadcast == r 说明因为等待进程启动而引起的超时。
if (mPendingBroadcast == r) {
    //将mPendingBroadcast设置为null。因为处理广播时，若
    //mPendingBroadcast不为null且进程还在，会接着等，什么也不做。
    mPendingBroadcast = null;
}

//把当前超时的广播的状态全部重置，善后工作。
finishReceiverLocked

//下面的见流程图。
scheduleBroadcastsLocked

mHandler.post(new AppNotResponding(app, anrMessage));

end note
BroadcastQueue -> BroadcastQueue : scheduleBroadcastsLocked
note right
处理分发下一个广播。
end note

BroadcastQueue -> BroadcastHandler : post(new AppNotResponding(app, anrMessage))

BroadcastHandler -> AppNotResponding : run,方法中显示ANR对话框
note right
显示ANR对话框。
end note

'r.state != BroadcastRecord.IDLE 说明有receiver正在分发。

'next，继续分发下一个receiver

BroadcastQueue -> BroadcastRecord : r.receivers.get(recIdx)
BroadcastQueue <-- BroadcastRecord : Object nextReceiver
note right
nextReceiver是BroadcastFilter类型，
就说明该receiver是动态注册的。
动态有序的。
end note

BroadcastQueue -> BroadcastQueue : deliverToRegisteredReceiverLocked

BroadcastQueue -> BroadcastQueue : performReceiveLocked

BroadcastQueue -> BroadcastRecord : BroadcastRecord的state 赋值为 BroadcastRecord.CALL_DONE_RECEIVE

BroadcastQueue -> IApplicationThread : scheduleRegisteredReceiver
note right
此时转到客户端接收部分。
此处的ordered为true
end note

IApplicationThread -> IIntentReceiver : InnerReceiver:performReceive

IIntentReceiver -> ReceiverDispatcher : performReceive

ReceiverDispatcher -> H : post(args.getRunnable())

H -> Runnable : run

Runnable -> BroadcastReceiver : setPendingResult(Args args)

Runnable -> BroadcastReceiver : onReceive

Runnable -> BroadcastReceiver.PendingResult : finish
note right: mOrderedHint 为true

BroadcastReceiver.PendingResult -> BroadcastReceiver.PendingResult : sendFinished

BroadcastReceiver.PendingResult -> IActivityManager : finishReceiver

IActivityManager -> AMS : finishReceiver

AMS -> BroadcastQueue : finishReceiverLocked

AMS <-- BroadcastQueue : doNext = true
note left
因为 deliverToRegisteredReceiverLocked方法中赋值
的r.state == BroadcastRecord.CALL_DONE_RECEIVE。
end note
AMS -> BroadcastQueue : processNextBroadcastLocked
note right
继续分发下一个receiver。
end note


@enduml