@startuml
title 动态广播的注册流程
Activity -> ContextImpl : registerReceiver
note right:参数(BroadcastReceiver receiver, IntentFilter filter)

ContextImpl ->  ContextImpl : registerReceiver
note right
参数：
(BroadcastReceiver receiver, IntentFilter filter,
         String broadcastPermission, Handler scheduler)
end note
ContextImpl ->  ContextImpl : registerReceiverInternal

ContextImpl -> LoadedApk : getReceiverDispatcher
note right
rd = new ReceiverDispatcher(r, context, handler,
                        instrumentation, registered);
可以看出，(BroadcastReceiver receiver, Context context),
对应了一个二元组，这个二元组对应一个ReceiverDispatcher，
即一个IIntentReceiver，AMS通过该IIntentReceiver与客户端交互。
end note

LoadedApk -> ReceiverDispatcher : getIIntentReceiver

LoadedApk <-- ReceiverDispatcher : InnerReceiver mIIntentReceiver

ContextImpl <-- LoadedApk : rd = IIntentReceiver

ContextImpl -> IActivityManager : registerReceiver(..,rd,..)

IActivityManager -> AMS : registerReceiver
note right
添加进去的主要代码：
1.ReceiverList rl = mRegisteredReceivers.get(receiver.asBinder());
ReceiverList类的定义如下,
"final class ReceiverList extends ArrayList<BroadcastFilter>"
里面的数据类型BroadcastFilter，定义如下，
"final class BroadcastFilter extends IntentFilter",
即BroadcastFilter 就是 IntentFilter。

mRegisteredReceivers
key为 IIntentReceiver对应的Binder，
value为 对应的ReceiverList。

2.rl.app.receivers.add(rl);

3.mRegisteredReceivers.put(receiver.asBinder(), rl);

4.BroadcastFilter bf = new BroadcastFilter(filter, rl, callerPackage,
                      permission, callingUid, userId, instantApp, visibleToInstantApps);
5.mReceiverResolver.addFilter(bf);

end note

@enduml