@startuml
'IServiceConnection: AIDL 文件'
ContextImpl -> LoadedApk: getServiceDispatcher
'解释该段代码'
 'private final ArrayMap<Context, ArrayMap<ServiceConnection, LoadedApk.ServiceDispatcher>> mServices
 '       = new ArrayMap<>();
 ' public final IServiceConnection getServiceDispatcher(ServiceConnection c,
 '            Context context, Handler handler, int flags) {
 '        synchronized (mServices) {
 '            LoadedApk.ServiceDispatcher sd = null;
 '            ArrayMap<ServiceConnection, LoadedApk.ServiceDispatcher> map = mServices.get(context);
 '            if (map != null) {
 '                if (DEBUG) Slog.d(TAG, "Returning existing dispatcher " + sd + " for conn " + c);
 '                sd = map.get(c);
 '            }
 '            if (sd == null) {
 '                sd = new ServiceDispatcher(c, context, handler, flags);
 '                if (DEBUG) Slog.d(TAG, "Creating new dispatcher " + sd + " for conn " + c);
 '                if (map == null) {
 '                    map = new ArrayMap<>();
 '                    mServices.put(context, map);
 '                }
 '                map.put(c, sd);
 '            } else {
 '                sd.validate(context, handler);
 '            }
 '            return sd.getIServiceConnection();
 '        }
 '    }'

LoadedApk -> LoadedApk.ServiceDispatcher: getIServiceConnection
'private static class InnerConnection extends IServiceConnection.Stub {
 '            @UnsupportedAppUsage
 '            final WeakReference<LoadedApk.ServiceDispatcher> mDispatcher;
 '
 '            InnerConnection(LoadedApk.ServiceDispatcher sd) {
 '                mDispatcher = new WeakReference<LoadedApk.ServiceDispatcher>(sd);
 '            }
 '
 '            public void connected(ComponentName name, IBinder service, boolean dead)
 '                    throws RemoteException {
 '                LoadedApk.ServiceDispatcher sd = mDispatcher.get();
 '                if (sd != null) {
 '                    sd.connected(name, service, dead);
 '                }
 '            }
 '        }'

LoadedApk.ServiceDispatcher --> LoadedApk: InnerConnection
note right
InnerConnection 实现IServiceConnection.Stub，
作为IServiceConnection.aidl 文件的本地实现，
通过IActivityManager的远程方法调用bindService，将
InnerConnection的实例sd传递给AMS，AMS在合适的时机，
通过调用InnerConnection的connected方法，来实现AMS
对客户端的跨进程方法调用。
end note
'ActivityManager.getService().bindService(
 '                mMainThread.getApplicationThread(), getActivityToken(), service,
 '                service.resolveTypeIfNeeded(getContentResolver()),
 '                sd, flags, getOpPackageName(), user.getIdentifier());'

AMS -> InnerConnection: connected
InnerConnection -> LoadedApk.ServiceDispatcher: connected
note right
mActivityThread是Handler类型的变量，
赋值是在ContextImpl类中，mMainThread.getHandler()，
其中，mMainThread是ActivityThread类型，
如此获取的即为ActivityThread中的Handler对象，
即主线程的Handler mH.
end note
LoadedApk.ServiceDispatcher -> ActivityThread.mH: post(RunConnection)
ActivityThread.mH -> RunConnection: run

RunConnection -> LoadedApk.ServiceDispatcher: doConnected
note left: 第一次bind对应service时
LoadedApk.ServiceDispatcher -> ServiceConnection: onServiceConnected(name, service)

@enduml